[
{
	"uri": "https://levuxuanan.github.io/levuxuanan.github.io-REMOTE-DEVELOPMENT-WITH-VS-VSCODE-AND-EC2/vi/1-connect-vscode-to-aws-ec2-using-ssh/",
	"title": "Kết nối VSCode với AWS EC2 bằng SSH",
	"tags": [],
	"description": "",
	"content": "1.1. Giới thiệu kết nối SSH SSH (Secure Shell) là một giao thức mạng dùng để thiết lập kết nối mạng một cách bảo mật. SSH hoạt động ở lớp trên trong mô hình phân lớp TCP/IP. Các công cụ SSH (như OpenSSH) cung cấp cho người dùng cách thức để thiết lập kết nối mạng được mã hoá để tạo một kênh kết nối riêng tư. SSH tạo ra cơ chế xác thực qua mật khẩu mạnh, hình thành mối liên kết giao tiếp dữ liệu mã hóa ra giữa hai máy qua môi trường internet. Chức năng: Hỗ trợ truy cập từ xa vào những hệ thống, thiết bị ứng dụng giao thức SSH. Cho phép dịch chuyển file an toàn. Thực thi lệnh bảo mật, an toàn trên hệ thống điều khiển từ xa. Quản lý an toàn và hiệu quả thành phần hạ tầng mạng. 1.2. Mục đích sử dụng SSH Mục đích SSH được tạo ra là để thay thế cho trình giả lập Terminal, cơ chế đăng nhập không an toàn (Telnet, Rlogin). Giao thức SSH hỗ trợ tính năng đăng nhập, khởi chạy Terminal Session thông qua hệ thống điều khiển từ xa. Chức năng cơ bản nhất của giao thức SSH là liên kết với một host từ xa, ứng với một phiên Terminal bằng dòng lệnh \u0026ldquo;ssh server.example.org\u0026rdquo;. Dòng lệnh này có thể liên kết Client với một máy chủ server.example.com thông qua ID người dùng UserName. Trường hợp đó là lần kết nối đầu tiên giữa của Server và Host, người dùng phải được thông báo mã khóa của Host.\n1.3. Giới thiệu Remote-SSH Extension trên VSCode Remote - SSH Extension cho phép bạn sử dụng bất kỳ máy từ xa nào có máy chủ SSH làm môi trường phát triển của bạn. Điều này có thể đơn giản hóa đáng kể quá trình phát triển và khắc phục sự cố trong nhiều tình huống khác nhau, giúp bạn:\nPhát triển trên cùng hệ điều hành mà bạn triển khai hoặc sử dụng phần cứng lớn hơn, nhanh hơn hoặc chuyên dụng hơn so với máy cục bộ của bạn. Nhanh chóng chuyển đổi giữa các môi trường phát triển từ xa khác nhau và thực hiện cập nhật an toàn mà không lo ảnh hưởng đến máy cục bộ của bạn. Truy cập môi trường phát triển hiện có từ nhiều máy hoặc vị trí. Gỡ lỗi ứng dụng đang chạy ở nơi khác như trang web của khách hàng hoặc trên đám mây. Không cần mã nguồn trên máy cục bộ của bạn để có được những lợi ích này vì tiện ích mở rộng chạy lệnh và các tiện ích mở rộng khác trực tiếp trên máy từ xa. Bạn có thể mở bất kỳ thư mục nào trên máy từ xa và làm 6. việc với nó giống như bạn sẽ làm nếu thư mục đó ở trên máy của riêng bạn. 1.4. Hướng dẫn khởi tạo Ubuntu EC2 Bước 1: Tạo VPC Điều hướng tới trang dịch vụ VPC Chọn Create VPC Chọn: Create VPC, chờ trong giây lát ta sẽ thu được kết quả như này. Tiếp theo, ta có thể ấn View VPC để xem Bước 2: Điều hướng tới trang dịch vụ của EC2. Bạn có thể gõ từ khóa “EC2” vào thanh tìm kiếm để điều hướng tới trang dịch vụ. Tại đây, Bạn chọn Launch instance để khởi tạo EC2 instance. Bước 3: Khởi tạo EC2 Thiết lập các thông tin về Name và Application and OS Images: Name: remote-connection Application and OS Images: Ubuntu Thiết lập các thông tin về AMI: AMI: Ubuntu Server 24.04 LTS (HVM), SSD Volume Type (mặc định) Chọn Instance Type: Instance Type: t2.micro Tạo key pair: Chọn: Create new key pair Name: remote_connect Type: RSA Private key file: .pem Chọn Create new key pair để tạo tạo key pair Ta sẽ nhận được 1 key pair: Tại phần Networking settings ta chọn theo mẫu bên dưới. Tại Firewall ta chọn: security group Cuối cùng chọn, Laucn instance để khởi tạo Ec2 đã vừa thiết lập thông tin. Kết quả thu được là 1.5. Hướng dẫn cấu hình kết nối Command Prompt với EC2 Bước 1: Mở Command Prompt Win + R và gõ “cmd” để mở Command Prompt Bảng Command Prompt được mở, bạn cùng lệnh cd Downloads để điều hướng tới folder đang chứa file testing-remote-connection.pem Bước 2: Kết nối SSH Tại không gian làm việc của dịch vụ EC2, chọn EC2 bạn muốn kết nối SSH. Tiếp đó, chọn Connect Sao chép lệnh ssh -i \u0026quot;testing-remote-connection.pem\u0026quot; [ubuntu@ec2-13-212-36-87.ap-southeast-1.compute.amazonaws.](mailto:ubuntu@ec2-13-212-36-87.ap-southeast-1.compute.amazonaws.com)com Dán lệnh vừa sao chép vào Command Prompt. Tiếp đó, bạn nhập “yes” để xác nhận kết nối. Kết nối thành công Bạn có thể kiểm tra bằng cách tạo file test.py trong folder “test” bằng các dòng lệnh như hình bên dưới. Kết quả, nạn sẽ nhận được màn hình làm việc của file test.py 1.6. Hướng dẫn cấu hình kết nối VSCode với EC2 Cài đặt tiện ích Remote-SSH để hỗ trợ việc kết nối vối SSH Host Sau khi cài đặt tiện ích, bạn sẽ nhìn thấy icon ở phía dưới bên trái của màn hình. Ấn vào icon để mở bảng chọn kết nối. Chọn “Connect to Host…” Chọn “Add New SSH Host” để tạo một SSH Host mới Chọn “C:\\Users\\Legion.ssh\\config” để mở fiel config Tại không gian làm việc của EC2, bạn chọn “Details” để lấy các thông tin cần thiết cho việc thiết lập SSH Host Host remote-connection\rHostName 13.212.36.87\rUser ubuntu\rIdentityFile \u0026#34;C:\\Users\\Legion\\Downloads\\testing-remote-connection.pem\u0026#34; Sau khi thiết lập xong, bạn ấn vào icon để mở bạng chọn và điều hướng tới “remote-connection” Tiếp theo, bạn chọn Platform details “Linux” và chọn “Continue” Thành công khi bạn mình làm việc của “SSH Host: remote-connection” mở ra Tiếp theo bạn có thể điều hướng tới folder test của mình bằng cách chọn File, chọn Open folder và điều hướng tới folder test. "
},
{
	"uri": "https://levuxuanan.github.io/levuxuanan.github.io-REMOTE-DEVELOPMENT-WITH-VS-VSCODE-AND-EC2/vi/2-connect-vscode-to-aws-ec2-using-zerotier/",
	"title": "kết nối VSCode với AWS EC2 bằng Zerotier",
	"tags": [],
	"description": "",
	"content": "Hiện mình đang có một EC2 Instance chạy trong private subnet\nInstance này kết nối internet thông qua nat gateway\nĐể tiến hành setup các phần mềm cần thiết cho Instance mình dùng SSM\n2.1. SSM connection Bước 1: Tạo role Search trên khung tìm kiếm IAM Chọn dịch vụ IAM Chọn tab Role Chọn Create Role Chọn AWS Service Chọn EC2 Chọn EC2 Role for AWS Systems Manager Next Next Đặt tên Create Role Bước 2: Attack role Trở về tab Instances Chọn Instance Chọn Action → Security → Modify IAM role Chọn role Chọn Update IAM Role Bước 3 Create SSM endpoint Bước này chỉ cần thực hiện khi bạn muốn kết nồi Instance nằm ở private subnet\nSearch dịch vụ VPC Chọn VPC Chọn tab Endpoints Chọn Create endpoints Đặt tên search ssm chọn theo hình Chọn ssm Chọn VPC Chọn subnet Chọn Security group bạn dùng cho instace Chọn Create Tương tự ta cần phải tạo 3 endpoint bao gồm:\ncom.amazonaws.us-east-1.ssm com.amazonaws.us-east-1.ssmmessages com.amazonaws.us-east-1.ec2messages Bước 4 test connection Tại Instance của bạn chọn Connect chọn tab Session Manager Chọn Connect 2.2. Zerotier setup Bước 1: tạo tài khoản zerotier Truy cập vào trang web ZeroTier | Global Networking Solution for IoT, SD-WAN, and VPN\nhttps://www.zerotier.com/\nTiến hành tạo tài khoản nếu chưa có hoặc đăng nhập nếu đã có Bước 2: Tạo mạng ảo chọn như hình bạn sẽ thấy xuất hiện một mạng ảo ms\nchọn mạng này và đổi tên cho nó ghi nhớ net ID để cho step kết tiếp Bước 3 cài zerotier lên instance của bạn Dán lệnh sau vào Session manage connect của instant để tiến hành download curl -s [https://install.zerotier.com](https://install.zerotier.com/) | sudo bash sau khi tải xong tiến hành kết nôi đến mạng ảo riêng\nDán lệnh sau vào Session manage connect của instant sudo zerotier-cli join YOUR_NETWORD_ID Trở lại trang web\nbạn thấy có một ip ms xin vào mạng của bạn\nChấp nhận nó Bước 4 cài lên zerotier lên thiết bị của bạn tại trang\nDownload - ZeroTier\ntiến hành tải và cài đặt phiên bản phù hợp vs hệ điều hành của bạn\nVí dụ sau khi cài đặt hoàn tất trên window của mình Join network như hình nhập network id của bạn và tiến hành chấp nhận như Bước 3 trên 2.3. Kết nối SSH tiến hành tương tư như các bước kết nối bằng địa chỉ ip public ở bài 1\nbạn chỉ việc thay địa chỉ ip public bằng pivate ip được cấp ở bước 3.\nsau khi đợi vài giây\n"
},
{
	"uri": "https://levuxuanan.github.io/levuxuanan.github.io-REMOTE-DEVELOPMENT-WITH-VS-VSCODE-AND-EC2/vi/3-hosting-vs-code-on-ec2-from-amazon-linux-2/",
	"title": "Hosting VS Code trên EC2 từ Amazon Linux 2",
	"tags": [],
	"description": "",
	"content": "Phần này ta sẽ triển khai 1 ứng dụng web cho VS Code trên EC2 từ máy ảo Amazon Linux 2 (từ giờ gọi tắt là AL2), rồi kết nối tới trang web đó một cách an toàn qua port forwarding của AWS Session Manager System Manager. Tham khảo:\nhttps://github.com/aws-samples/vscode-on-ec2-for-prototyping https://github.com/peteragility/ssm-port-forward 3.0. Cấu hình SSH trên máy ảo AL2 Cho thuận tiện trong việc gõ lệnh, mình cấu hình SSH cho máy ảo AL2 để truy cập từ Terminal máy tính thật.\nBước 1: Mở file /etc/ssh/sshd_config sudo nano /etc/ssh/sshd_config\nBước 2: Đảm bảo có dòng “PasswordAuthentication yes” Bước 3: Reset lại sshd sudo systemctl restart sshd\n3.1. Cài AWS CLI Tham khảo: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html\nLinux: curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; unzip awscliv2.zip sudo ./aws/install Windows: Tải và cài AWS CLI từ https://awscli.amazonaws.com/AWSCLIV2.msi\nKiểm tra phiên bản aws --version 3.2. Cài NodeJS tham khảo Tutorial: Setting Up Node.js on an Amazon EC2 Instance - AWS SDK for JavaScript Bước 1: Cài nvm Bước 2: Cài NodeJS LTS Phiên bản NodeJS đã cài là 20.16.0.\nBước 3: Xác định phiên bản bằng lệnh node -v thì lỗi không thấy thư viện Để khắc phục vấn đề này, mình tham khảo link node.js - GLIBC_2.27 not found while installing Node on Amazon EC2 instance - Stack Overflow, có 2 giải pháp:\nDowngrade version của NodeJS (hiện tại là 20.16.0) xuống 16.0.0. nvm install 16.0.0 Cài phiên bản thư viện GLBIC_2.27 trở lên Từ link stack overflow trên sẽ dẫn tới link glibc 2.27+ on Amazon Linux 2 | AWS re:Post (repost.aws). Theo đó, ta biết việc nâng cấp phiên bản là không thể, mà downgrade NodeJS sẽ có thể gặp rủi ro thiếu thư viện hỗ trợ bất cứ khi nào web app triển khai ở phía sau được nâng cấp.\n3.3. Cài session-manager plugin tham khảo Install the Session Manager plugin on Amazon Linux 2 and Red Hat Enterprise Linux distributions - AWS Systems Manager)\nBước 1: Cài session-managuer-plugin sudo yum install -y https://s3.amazonaws.com/session-manager-downloads/plugin/latest/linux_64bit/session-manager-plugin.rpm Bước 2: Cài đặt project npm ci Bước 3: Nếu chưa từng sử dụng CDK trước đây, quy trình Bootstrap chỉ cần thiết cho lần đầu tiên. Lệnh sau không cần thiết nếu đã bootstrap. npx cdk bootstrap Bước 4: Triển khai lên AWS: npx cdk deploy Nếu được hỏi “Do you wish to deploy these changes?” Nhập y\nChờ vài phút để cài đặt:\n(phụ): Tiến hành quan sát stack VscodeOnEc2ForPrototypingStack Tag Output:\nTag Resources:\nCDKToolkit stack Tag Outputs Tag Resources Check instance\nBước 5: Kết nối nhưng lỗi Không thể kết nối web app do chỉ mở ở localhost. Nhưng nếu tạo session kết nối EC2 bằng Windows (tham khảo https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-sessions-start.html#sessions-remote-port-forwarding):\nTada:\n3.4. Demo network performance: https://www.youtube.com/watch?v=Pe1Whz-Q0TQ\n3.5. Cleanup: Chờ vài phút:\nVào S3 Console để xóa S3 bucket đã tạo (tên bắt đầu là cdk-hnb)\n"
},
{
	"uri": "https://levuxuanan.github.io/levuxuanan.github.io-REMOTE-DEVELOPMENT-WITH-VS-VSCODE-AND-EC2/vi/4-manually-deploy-vs-code-on-ec2/",
	"title": "Triển khai thủ công VS Code trên EC2",
	"tags": [],
	"description": "",
	"content": "(mở rộng của mục 3, không cần dùng CDK)\n4.1. Cài đặt môi trường 4.1.1. VPC Yêu cầu:\nPrivate subnet để đặt EC2 instance (tối thiểu 1) 1 NAT Gateway để instance truy cập internet Tối thiểu 1 Public subnet để đặt Internet Gateway Để tiện thì mình dùng tính năng “VPC and more” trong “Create VPC”:\nResource map:\nKết quả:\n4.1.2. Tạo Role và Policy cho SSM Bước 1: Tạo policy Tạo Policy dạng JSON, có thể đặt tên là VSCodeBastionHostInstanceRoleDefaultPolicy\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Action\u0026#34;: [ \u0026#34;*\u0026#34;, \u0026#34;ec2messages:*\u0026#34;, \u0026#34;ssm:UpdateInstanceInformation\u0026#34;, \u0026#34;ssmmessages:*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34; } ] } Kết quả:\nBước 2: Tạo role và thêm policy vừa tạo vào role Đặt tên role là VscodeOnEc2ForPrototyping\nRole được dùng cho IAM instance profile\n4.1.3. Tạo security group cho EC2 Nếu EC2 instance của bạn không phải một ứng dụng công khai, thì theo best practice, không cần inbound rule, vì ta chỉ truy cập tới EC2 instance qua port forwarding của Session Manager.\nĐặt tên security group là VSC-SG\n4.2 Triển khai 4.2.1. Tạo EC2 instance Bước 1: Chọn AMI là Amazon Linux 2023, instance type là t3.medium Bước 2: Chọn VPC vừa tạo → private subnet bất kỳ Bước 3: Đảm bảo không có public IP Bước 4: Chọn security group VSC-SG Bước 5: Cấu hình volume 100GB Bước 6: Chọn IAM instance profile tên “VscodeOnEc2ForPrototyping” đã tạo từ trước Bước 7: Mục user-data, dán đoạn code sau: #!/bin/bash #!/bin/bash sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc sudo sh -c \u0026#39;echo -e \u0026#34;[code] name=Visual Studio Code baseurl=https://packages.microsoft.com/yumrepos/vscode enabled=1 gpgcheck=1 gpgkey=https://packages.microsoft.com/keys/microsoft.asc\u0026#34; \u0026gt; /etc/yum.repos.d/vscode.repo\u0026#39; # https://github.com/amazonlinux/amazon-linux-2023/issues/397 sleep 10 sudo yum install -y code git sudo tee /etc/systemd/system/code-server.service \u0026lt;\u0026lt;EOF [Unit] Description=Start code server [Service] ExecStart=/usr/bin/code serve-web --port 8080 --host 0.0.0.0 --without-connection-token Restart=always Type=simple User=ec2-user [Install] WantedBy = multi-user.target EOF sudo systemctl daemon-reload sudo systemctl enable --now code-server # Install Node.js sudo -u ec2-user -i \u0026lt;\u0026lt;EOF curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash source .bashrc nvm install 20.11.0 nvm use 20.11.0 EOF Mục đích: triển khai VS-Code trên web port 8080 của EC2 instance\nBước 8: Cuối cùng, chọn “Create instance”. Sau vài phút, đảm bảo rằng instance đã được khởi tạo thành công\nBước 9: Kết nối instance bằng việc chọn Connect → Session Manager Đảm bảo SSM agent đã được cài đặt bằng cách kết nối vào instance qua Session Manager\nKhi cấu hình thành công:\nBước 10: Kiểm tra web app đã triển khai thành công bằng lệnh curl localhost:8080 Khi web đã triển khai, ta có thể lấy được tài nguyên của trang đang mở trên port 8080:\n4.2.2. Truy cập VS Code triển khai trên EC2 từ SSM qua port forwarding Thay và trong đoạn script dưới tương ứng với private IP và instance ID của EC2 instance\nKết nối từ Linux (lưu ý phải có GUI trên máy Linux): aws ssm start-session \\ --target \u0026lt;instance-ID\u0026gt; \\ --document-name AWS-StartPortForwardingSessionToRemoteHost \\ --parameters \u0026#39;{\u0026#34;host\u0026#34;:[\u0026#34;\u0026lt;Private-IP\u0026gt;\u0026#34;],\u0026#34;portNumber\u0026#34;:[\u0026#34;8080\u0026#34;], \u0026#34;localPortNumber\u0026#34;:[\u0026#34;8080\u0026#34;]}\u0026#39; Kết nối từ Windows: aws ssm start-session ^ --target \u0026lt;instance-ID\u0026gt; ^ --document-name AWS-StartPortForwardingSessionToRemoteHost ^ --parameters host=\u0026#34;\u0026lt;Private-IP\u0026gt;\u0026#34;,portNumber=\u0026#34;8080\u0026#34;,localPortNumber=\u0026#34;8080\u0026#34; Khi này, truy cập localhost:8080 trên browser:\n4.2. Kiểm tra performace: Link youtube: https://youtu.be/6DxtEsX6gvY\n"
},
{
	"uri": "https://levuxuanan.github.io/levuxuanan.github.io-REMOTE-DEVELOPMENT-WITH-VS-VSCODE-AND-EC2/vi/5-extended-create-an-ami-from-an-instance-and-run-an-instance-from-that-ami/",
	"title": "Tạo AMI từ instance và chạy instance từ AMI đó",
	"tags": [],
	"description": "",
	"content": "5.1. Tạo AMI Tham khảo: https://000004.awsstudygroup.com/5-amazonec2basic/5.3-createcustomami/\nBước 1: Chọn Instance. Ô Action, Chọn Image and template → Create Image Bước 2: Đặt tên rồi chọn Create Image Chờ vài phút tới khi tình trạng OK:\n5.2. Tạo instance từ AMI Bước 1: Ở tag trái AMIs, chọn AMI vừa tạo, chọn “Launch instance from AMI Bước 2: Đặt tên cho instance tạo từ AMI là VSCodeFromAMI Bước 3: Giữ nguyên instance type (muốn nhanh hơn thì để type t3.medium). Mục key pair chọn Proceed without a key pair vì ta kết nối bằng SSM. Bước 4: Chọn VPC có private subnet. Phần subnet chọn private subnet. Bước 5: Chọn security group tạo ở mục trước, VSC-SG, hoặc tạo mới: không có inbound rule; outbound rule mở cho Internet trên mọi giao thức. Bước 6: Gán IAM profile cần thiết cho SSM Bước 7: Chọn Create instance Sau vài phút, instance sẽ khởi tạo xong\nBước 8: Tạo session kết nối instance vừa tạo từ ami qua port forwarding: aws ssm start-session ^ --target instance-id ^ --document-name AWS-StartPortForwardingSessionToRemoteHost ^ --parameters host=\u0026#34;private-ip\u0026#34;,portNumber=\u0026#34;8080\u0026#34;,localPortNumber=\u0026#34;8080\u0026#34; "
},
{
	"uri": "https://levuxuanan.github.io/levuxuanan.github.io-REMOTE-DEVELOPMENT-WITH-VS-VSCODE-AND-EC2/vi/6-generate-vscode-from-ami-build-from-ec2-image-builder/",
	"title": "Tạo VSCode từ bản dựng AMI từ EC2 Image Builder",
	"tags": [],
	"description": "",
	"content": "C2 Image Builder giúp tự động hóa việc tạo, quản lý và triển khai các ami “golden” được tùy chỉnh, an toàn và cập nhật được cài đặt sẵn và cấu hình sẵn bằng phần mềm và cài đặt.\nPhần này ta sẽ xây dựng một AMI cũng như phần 5, nhưng bằng cách dùng EC2 Image Builder để tạo ra một quy trình image pipeline từ khâu cấu hình hạ tầng (OS, VPC, subnet, security group), IAM instance profile, tới việc cài đặt cho ami, triển khai thành instance và test trạng thái instance đó, đồng thời scan lỗ hổng bảo mật trong ami.\nTham khảo: AWS for Microsoft Workloads Immersion Day (workshops.aws)\n6.1. Thuật ngữ 6.2.1. AMI Đơn vị triển khai cơ bản trong Amazon EC2. AMI là VM image được cấu hình sẵn có chứa hệ điều hành và phần mềm được cài đặt sẵn để triển khai các phiên bản EC2.\n6.2.2. Image Pipeline Cấu hình tự động để xây dựng hình ảnh hệ điều hành an toàn trên AWS. Image Builder pipeline được liên kết với một image recipe xác định các giai đoạn xây dựng (build), xác thực (validation) và thử nghiệm (test) cho vòng đời xây dựng image. Image pipeline có thể được liên kết với infrastructure configuration nhằm định nghĩa nơi image được xây dựng (build). Bạn có thể xác định các thuộc tính, chẳng hạn như version*,** subnet, security groups*, logging và các cấu hình khác liên quan đến cơ sở hạ tầng.\n6.2.3. Image Recipe Image recipe là một tài liệu (document) xác định source image và các thành phần sẽ được áp dụng cho source image để tạo cấu hình mong muốn cho hình ảnh đầu ra. Bạn có thể sử dụng image recipe để sao chép các bản dựng (build). Image Builder recipe có thể được chia sẻ, phân nhánh và chỉnh sửa bằng console, AWS CLI hoặc API.\n6.2.4. Source Image Image đã chọn và hệ điều hành được sử dụng trong image recipe document của bạn cùng với các thành phần. Ảnh nguồn và định nghĩa thành phần kết hợp tạo ra cấu hình mong muốn cho output image.\n6.2.5. Build Components Tài liệu dàn dựng (orchestration documents) xác định trình tự các bước để tải xuống, cài đặt và cấu hình các gói phần mềm. Chúng cũng xác định các bước xác thực và tăng cường bảo mật. Một thành phần được xác định bằng định dạng tài liệu YAML.\n6.2. Triển khai 6.2.1. Tạo Component Bước 1: Truy cập Components console. Click Create component. Bước 2: Chọn Type là Build. Bước 3: Chọn các giá trị theo danh sách sau OS: Linux Compatible OS Versions: Amazon Linux 2023 Component name: VSC-Component Component version: 1.0.0 Bước 4: Mục Definition document, phần Content, copy nội dung sau vào: name: HelloWorldTestingDocument description: This is hello world testing document. schemaVersion: 1.0 phases: - name: build steps: - name: HostingVSCode action: ExecuteBash inputs: commands: - | #!/bin/bash sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc sudo sh -c \u0026#39;echo -e \u0026#34;[code] name=Visual Studio Code baseurl=https://packages.microsoft.com/yumrepos/vscode enabled=1 gpgcheck=1 gpgkey=https://packages.microsoft.com/keys/microsoft.asc\u0026#34; \u0026gt; /etc/yum.repos.d/vscode.repo\u0026#39; # https://github.com/amazonlinux/amazon-linux-2023/issues/397 sleep 10 sudo yum install -y code git sudo tee /etc/systemd/system/code-server.service \u0026lt;\u0026lt;EOF [Unit] Description=Start code server [Service] ExecStart=/usr/bin/code serve-web --port 8080 --host 0.0.0.0 --without-connection-token Restart=always Type=simple User=ec2-user [Install] WantedBy = multi-user.target EOF sudo systemctl daemon-reload sudo systemctl enable --now code-server # Install Node.js sudo -u ec2-user -i \u0026lt;\u0026lt;EOF curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash source .bashrc nvm install 20.11.0 nvm use 20.11.0 EOF - name: validate steps: - name: VSCodeValidate action: ExecuteBash inputs: commands: - | #!/bin/bash if ! command -v code \u0026amp;\u0026gt; /dev/null then echo \u0026#34;code could not be found\u0026#34; exit 1 fi - name: validate steps: - name: NodeJSValidate action: ExecuteBash inputs: commands: - | #!/bin/bash if ! command -v node \u0026amp;\u0026gt; /dev/null then echo \u0026#34;Node could not be found\u0026#34; exit 1 fi - name: test steps: - name: TestWhetherAppDeploy action: ExecuteBash inputs: commands: - | #!/bin/bash if ! sudo lsof -i -n -P | grep 8080 | grep -w code \u0026amp;\u0026gt; /dev/null then echo \u0026#34;App could not be found\u0026#34; exit 1 fi Nội dung document này gồm 3 phần:\nBuild: Dựa trên user-data của phần trước. Cài đặt VS Code dạng web app lắng nghe ở port 8080. Validation: Kiểm tra liệu đã cài thành công NodeJS và VS Code Test: Kiểm tra liệu web app có tồn tại và lắng nghe ở port 8080 Bước 5: Chọn “Create Component”. Kết quả:\nBước 6 (Phụ): Tạo version mới bằng cách chọn Action → Create new version. Chỉ cần đổi nội dung mục content và sửa lại giá trị mục Component version rồi chọn Create component\n6.2.2. Tạo role cho EC2 Image Builder Bước 1: Chọn AWS service , use case EC2 Bước 2: Thêm các policy như hình sau Bước 3: Đặt tên Role là EC2ImageBuilderInfraConfigRole và mô tả 6.2.3. Tạo pipeline Bước 1: Truy cập pipeline console. Bước 2: Đặt tên cho pipeline là VSC-Pipeline . Mô tả tùy ý. Có thể chọn thêm các option Enable EC2 image scanning để đảm bảo ami bảo mật.\nBước 3: Mục Build schedule, chọn Manual rồi chọn Next. Bước 4: Mục Recipe, chọn Create new recipe . Mục Image type chọn AMI Bước 5: Mục General, đặt tên cho ami và phiên bản Bước 6: Mục Base image, chọn Select managed images và Amazon Linux Bước 7: Tại Image origin, chọn Quick start . Tại Image name, chọn Amazon Linux 2023 x86 . Chọn version tương thích, hiện tại chọn Use latest available OS version Bước 8: Tại Working directory, gõ /home/ec2-user vì sẽ tải nvm vào thư mục home của user thực thi là ec2-user. Bước 9: Tại Filter owner mục Components, chọn ô Owned by me. Chọn component đã tạo. Trong hình là phiên bản 1.0.1, vì đã làm thêm bước tạo version mới ở phần trước (nội dung component không đổi).\nMục Test components - Amazon Linux, với mục đích demo, chọn reboot-test-linux .\nBước 10: Để mặc định phần Storage rồi Next. Bước 11: Mục Define image creation process, chọn Next. Bước 12: Mục Infrastructure configuration, chọn Create a new infrastructure configuration. Đặt tên là VSC-InfraConfig . Chọn IAM role đã tạo. Bước 13: Mở rộng mục VPC, subnet and security groups. Chọn instance type là t3.medium , VPC là VSC (đã tạo ở Phần 4), chọn 1 trong 2 private subnet, chọn security group có từ VSC (security không inbound rule của phần trước) để có thể tạo và đánh giá instance. Chọn Next. Nhắc lại về security group outbound rules:\nBước 14: Mục distribution settings để default rồi Next. Bước 15: Sau khi review, chọn Create pipeline. 6.3. Tạo instance từ AMI dựng từ pipeline 6.3.1. Tạo AMI từ pipline Bước 1: Chọn pipeline vừa tạo. Ô Action, chọn Run pipeline: Thông báo màu xanh hiện ra.\nBước 2: Bấm View details để theo dõi chi tiết: Thấy Image status là Testing.\nBước 3: Chọn link log stream để theo dõi CloudWatch log stream của pipeline Phase test, step TestWhetherAppDeploy:\nPhase RebootTest :\nNếu lỗi thì exit code 1, không lỗi thì exit code 0. Sau cùng, instance test không lỗi.\nBước 4: Quay lại pipeline đang chạy. Khi build ami xong, image status đổi thành Available. Click vào phiên bản image đã tạo (hình dưới là 1.0.4/1): Bước 5: Quan sát image đã tạo từ EC2 Image Builder. Bấm vào link AMI: Bước 6: Quan sát ami từ trang EC2 AMI đã tạo thành công, và đã trải qua các test trong quá trình pipeline mà không phát sinh lỗi.\n6.3.2. Tạo instance từ AMI vừa tạo Bước 1: Vào trang AMI của EC2 console. Chọn ami vừa tạo. Click Launch instance from AMI Bước 2: Chọn instance type. Để tiết kiệm thì chọn t2.micro . Bước 3: Không cần key pair. Bước 4: Chọn VPC và security group có từ VSC , private subnet, đảm bảo không có public IP Bước 5: Cung cấp IAM instance profile có từ VSC để cài đặt SSM agent Bước 6: Chọn Create instance Bước 7: Đợi tới khi instance status Available Bước 8: Truy cập web app VSCode bằng Session Manager qua port forwarding aws ssm start-session ^ --target i-06ae65824244ff79b ^ --document-name AWS-StartPortForwardingSessionToRemoteHost ^ --parameters host=\u0026#34;10.0.132.106\u0026#34;,portNumber=\u0026#34;8080\u0026#34;,localPortNumber=\u0026#34;8080\u0026#34; Truy cập thành công!\n"
},
{
	"uri": "https://levuxuanan.github.io/levuxuanan.github.io-REMOTE-DEVELOPMENT-WITH-VS-VSCODE-AND-EC2/vi/7-connect-vscode-using-ec2_instances_connect-and-aws-systems-manager/",
	"title": "Kết nối VScode bằng EC2_Instances_Connect và AWS Systems Manager",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ thực hiện kết nối vscode remote ssh với EC2 nằm trong private subnet\nthông qua hai phương pháp khác nhau:\nEC2_Instances_Connect AWS Systems Manager Bước 1 Setup các endpoint cần thiết để kết nối ssh với ec2 nằm trong private connect ta cần phải kết nối thông qua một thiết bị trung gian: có thể là bastion host, hoặc các endpoint\nDùng EC2 Instance Connect Endpoint\nTương tự như các thiết lập endpoint ở bài trên ta cần tạo endpoint như sau\nDùng bộ 3 ssm endpoint connect\nTương tự như các thiết lập endpoint ở bài trên ta cần tạo endpoint như sau\nLưu ý trong phần thiết lập:\nChúng ta cần trỏ đúng đến VPC, subnet của EC2 cần kết nối Cần mở security group để EC2 và endpoint có thể kết nối được với nhau Lưu ý:\nChúng ta cần trỏ đúng đến VPC, subnet của EC2 cần kết nối Cần mở security group để EC2 và endpoint có thể kết nối được với nhau Cần phải tạo 3 endpoint bao gồm: com.amazonaws.us-east-1.ssm com.amazonaws.us-east-1.ssmmessages com.amazonaws.us-east-1.ec2messages EC2 Instance Connect cho phép chúng ta tạo trực tiếp VPC endpoint trong phần kết nối của ec2.\nEC2 Instance Connect không yêu cầu thiết lập thêm các plugin phụ\nEC2 Instance Connect không yêu cầu cấp quyền truy cập để kết nối ec2 vs dịch vụ quản lý vì bản chất nó là kết nối trực tiếp nên không cần dịch vụ quản lý\nChỉ có thể kết nối đến 1 EC2, Thiết lập riêng từng máy\nCấu hình dễ dàng hơn.\nBản phải thiết lập các endpoint này trong phần VPC Endpoint\nPhải thiết lập plugin cho AWS CLI trên thiết bị nguồn\nPhải có SSM agent trên EC2, lưu ý:\nMột số AMI mặt định đã có cấu hình agent Bạn có thể tham khảo thêm ở đây Bản chất SSM là một dịch vụ quản lý nên, bạn cần cấp quyền cho phép EC2 Tương tác với dịch vụ này. Bạn có thể tham khảo các bước cấp quyền, chi tiết quyền\nCho phép bạn cấu hình cùng lúc nhiều thiết bị, đây là nội dung của dịch vụ AWS Systems Manager\nCả 2 phương pháp này đều không yêu cầu:\nThiết lập các port ssh cho quá trình kết nối Public EC2 bạn ra internet Cài đặt các gói user data của VScode Bước 2: Cấu hình EC2 Tạo kết nối EC2 Instance Connect trực tiếp trong tab connect của ec2\nBước 3: Thử kết nối EC2_Instances_Connect Nếu bạn nhìn thấy 3 cảnh báo trên và không thể kết nối được với ec2 của mình trong tab EC2 Instance Connect chứng tỏ các thiết lập về VPC, subnet của bạn hiện tại đang đi đúng hướng.\nChọn theo hình\nnếu bạn nhận được kết quả nút kết nối màu vàng các thiết lập về sg và endpoint của bạn đã chính xác\nnếu không được đọc các bước khắc phục ở bên\nChọn Connect AWS Systems Manager Tại tab Session Manager nếu bạn nhìn thấy nút kết nối có màu vàng như trong hình có nghĩa là bạn đã thiết lập thành công kết nối của mình\nNếu không được bạn có thể kiểm tra các thiết lập sau:\nSecurity group của bạn có thiết lập đúng không, recommend nếu không chắc chắn bạn nên thiết lập sg default cho cho cả endpoint và EC2 của mình\nKiểm tra các endpoint và các subnet của mình có trỏ đúng đến cùng một subnet private không. Lưu ý rằng việc chọn subnet cho endpoint ở phần một là thiết lập target để endpoint kết nối đến chứ không phải là vị trí đặt endpoint.\nKhông cần thiết lập endpoint cho public subnet\nKiểm tra xem AMI của bạn có hổ trợ Agent ssm hay không. Nếu có thực hiện reboot lại instance, nếu không có thể xóa đi, và tạo lại hoặc tiến hành kết nối EC2_Instances_Connect và cài đặt agent\nChọn Connect\nBước 4: kết nối bằng CLI Các bước tiếp theo yêu cầu mấy phải được thiết lập AWS CLI v2\nNếu chưa có bạn có thể tham khảo ở đây\nEC2_Instances_Connect Không yêu cầu cái gói cài đặt khác\nAWS Systems Manager yêu cầu phải có plugin để thực hiện kết nối session trên cli, nếu chưa có thể tham khảo tại đây\naws ec2-instance-connect ssh --instance-id \u0026lt;instance_id\u0026gt; aws ssm start-session --target \u0026lt;instance_id\u0026gt; Bước 5: Cấu hình VSCode Như vậy ta đã thành công kết nối ec2 thông qua cli, bây giờ ta cần thiết lập chúng kết nối thông qua vscode\nTa thực hiện các bước tương tự như kết nối với EC2 ở public subnet\nTại bước edit host ta sẽ thực hiện việc tạo các tunnel để ssh thay vì dùng public ip\nCông việc rất đơn giản, chỉ việc cấu hình file host của bạn như sau\n"
},
{
	"uri": "https://levuxuanan.github.io/levuxuanan.github.io-REMOTE-DEVELOPMENT-WITH-VS-VSCODE-AND-EC2/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://levuxuanan.github.io/levuxuanan.github.io-REMOTE-DEVELOPMENT-WITH-VS-VSCODE-AND-EC2/vi/",
	"title": "REMOTE DEVELOPMENT WITH VS VSCODE AND EC2",
	"tags": [],
	"description": "",
	"content": "REMOTE DEVELOPMENT WITH VS VSCODE AND EC2 Kết nối môi trường phát triển phần mềm với máy chủ cloud giúp tăng cường khả năng mở rộng và linh hoạt của ứng dụng, cho phép các nhà phát triển dễ dàng điều chỉnh tài nguyên theo nhu cầu.\nNgoài ra, việc sử dụng máy chủ cloud cải thiện khả năng cộng tác, giúp các thành viên trong nhóm có thể làm việc từ xa một cách hiệu quả. Và hơn hết, Cloud cung cấp các công cụ và dịch vụ tự động hóa, giúp tối ưu hóa quy trình phát triển và triển khai ứng dụng.\nBài viết này sẽ giới thiệu các giải pháp để kết nối môi trường phát triển phần mềm Virtual Studio Code với máy chủ EC2.\nMỤC LỤC 1. Kết nối VSCode với AWS EC2 bằng SSH\n1.1. Giới thiệu kết nối SSH\n1.2. Mục đích sử dụng SSH\n1.3. Giới thiệu Remote-SSH Extension trên VSCode\n1.4. Hướng dẫn khởi tạo Ubuntu EC2\n1.5. Hướng dẫn cấu hình kết nối Command Prompt với EC2\n1.6. Hướng dẫn cấu hình kết nối VSCode với EC2\n2. Kết nối VSCode với AWS EC2 bằng Zerotier\n2.1. SSM connection\n2.2. Zerotier setup\n2.3. Kết nối SSH\n3. Triển khai VS-Code trên EC2 instance từ Amazon Linux 2 bằng CDK\n4. Triển khai thủ công VS-Code trên EC2 instance từ Amazon Linux 2\n5. Tạo AMI từ instance triển khai VSCode và tạo EC2 instance từ AMI đó\n6. Tạo AMI từ EC2 Image Builder và tạo EC2 instance hosting VS Code web app từ AMI đó\n7. Kết nối VScode bằng EC2_Instances_Connect và AWS Systems Manager\n"
},
{
	"uri": "https://levuxuanan.github.io/levuxuanan.github.io-REMOTE-DEVELOPMENT-WITH-VS-VSCODE-AND-EC2/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]