[{"uri":"https://thongnguyendt.github.io/AWS-Remote-VSC-to-EC2/1-connect-vscode-to-aws-ec2-using-ssh/","title":"Connect VSCode to AWS EC2 using SSH","tags":[],"description":"","content":"1.1. Introduction to SSH connection SSH (Secure Shell) is a network protocol used to establish a secure network connection. SSH operates at the upper layer of the TCP/IP layer model. SSH tools (such as OpenSSH) provide users with a way to establish an encrypted network connection to create a private connection channel.\nSSH creates a strong password authentication mechanism, forming an encrypted data communication link between two machines over the internet environment.\nFunctions:\nSupport remote access to systems and devices using the SSH protocol.\nAllow secure file transfer.\nExecute secure, safe commands on the remote control system.\nSafe and effective management of network infrastructure components.\n1.2. Purpose of SSH The purpose of SSH is to replace the Terminal emulator, the insecure login mechanism (Telnet, Rlogin). The SSH protocol supports the login feature, launching the Terminal Session through the remote control system.\nThe most basic function of the SSH protocol is to connect to a remote host, corresponding to a Terminal session with the command line \u0026ldquo;ssh server.example.org\u0026rdquo;. This command line can connect the Client to a server server.example.com through the user ID UserName.\nIn case it is the first connection between the Server and the Host, the user must be informed of the Host\u0026rsquo;s key code.\n1.3. Introducing Remote-SSH Extension on VSCode Remote - SSH Extension allows you to use any remote machine with an SSH server as your development environment. This can significantly simplify development and troubleshooting in a variety of scenarios, allowing you to:\nDevelop on the same operating system you deploy to or use hardware that is larger, faster, or more specialized than your local machine.\nQuickly switch between different remote development environments and perform secure updates without worrying about affecting your local machine.\nAccess existing development environments from multiple machines or locations.\nDebug applications running elsewhere, such as a customer site or in the cloud.\nNo need for source code on your local machine to get these benefits because the extension runs commands and other extensions directly on the remote machine. You can open any folder on the remote machine and do 6. things with it just like you would if that folder was on your own machine.\n1.4. Ubuntu EC2 Initialization Guide Step 1: Create VPC Navigate to the VPC service page Select Create VPC Select: Create VPC, wait a moment and we will get the result like this. Next, we can click View VPC to see Step 2: Navigate to the EC2 service page. You can type the keyword “EC2” in the search bar to navigate to the service page. Here, you select Launch instance to initialize EC2 instance. Step 3: Initialize EC2 Set up information about Name and Application and OS Images:\nName: remote-connection\nApplication and OS Images: Ubuntu\nSet up information about AMI:\nAMI: Ubuntu Server 24.04 LTS (HVM), SSD Volume Type (default)\nSelect Instance Type: Instance Type: t2.micro Create key pair:\nSelect: Create new key pair\nName: remote_connect\nType: RSA\nPrivate key file: .pem\nSelect Create new key pair to create key pair\nWe will receive 1 key pair: In the Networking settings section, we choose according to the form below. At Firewall, we select: security group Finally, select, Launch instance to initialize Ec2 that has just been set up. The result is 1.5. Instructions for configuring Command Prompt connection with EC2 Step 1: Open Command Prompt Win + R and type “cmd” to open Command Prompt The Command Prompt panel is opened, you use the command cd Downloads to navigate to the folder containing the file testing-remote-connection.pem Step 2: Connect SSH In the EC2 service workspace, select the EC2 you want to connect to SSH. Next, select Connect Copy the command ssh -i \u0026quot;testing-remote-connection.pem\u0026quot; [ubuntu@ec2-13-212-36-87.ap-southeast-1.compute.amazonaws.](mailto:ubuntu@ec2-13-212-36-87.ap-southeast-1.compute.amazonaws.com)com Paste the copied command into the Command Prompt. Next, type “yes” to confirm the connection. Connection successful You can check by creating a test.py file in the “test” folder using the command lines as shown below. As a result, the victim will receive the working screen of the test.py file 1.6. Instructions for configuring VSCode connection with EC2 Install Remote-SSH utility to support connecting to SSH Host After installing the utility, you will see the icon at the bottom left of the screen. Click on the icon to open the connection selection panel. Select “Connect to Host…” Select “Add New SSH Host” to create a new SSH Host Select “C:\\Users\\Legion.ssh\\config” to open the config file In the EC2 workspace, select “Details” to get the necessary information for setting up SSH Host Host remote-connection\rHostName 13.212.36.87\rUser ubuntu\rIdentityFile \u0026#34;C:\\Users\\Legion\\Downloads\\testing-remote-connection.pem\u0026#34; After setting up, click on the icon to open you select and navigate to “remote-connection” Next, you select Platform details “Linux” and select “Continue” Success when your friend works on “SSH Host: remote-connection” open Next you can navigate to your test folder by selecting File, selecting Open folder and navigating to the test folder. "},{"uri":"https://thongnguyendt.github.io/AWS-Remote-VSC-to-EC2/2-connect-vscode-to-aws-ec2-using-zerotier/","title":"Connect VSCode to AWS EC2 using Zerotier","tags":[],"description":"","content":"I currently have an EC2 Instance running in a private subnet\nThis Instance connects to the internet via nat gateway\nTo set up the necessary software for the Instance, I use SSM\n2.1. SSM connection Step 1: Create role Search on the search box IAM\nSelect the IAM service\nSelect the Role tab\nSelect Create Role\nSelect AWS Service Select EC2 Select EC2 Role for AWS Systems Manager Next Next Name\nCreate Role\nStep 2: Attack role Return to the Instances tab\nSelect Instance\nSelect Action → Security → Modify IAM role\nSelect role Select Update IAM Role Step 3 Create SSM endpoint This step is only needed when you want to connect Instance located in private subnet\nSearch for VPC service Select VPC Select Endpoints tab Select Create endpoints Name search ssm select by image Select ssm Select VPC Select subnet Select the Security group you use for the instance Select Create Similarly, we need to create 3 endpoints including:\ncom.amazonaws.us-east-1.ssm com.amazonaws.us-east-1.ssmmessages com.amazonaws.us-east-1.ec2messages Step 4 test connection In your Instance, select Connect select the Session Manager tab Select Connect 2.2. Zerotier setup Step 1: create zerotier account Go to website ZeroTier | Global Networking Solution for IoT, SD-WAN, and VPN\nhttps://www.zerotier.com/\nCreate an account if you don\u0026rsquo;t have one or log in if you already have one Step 2: Create a virtual network select as shown you will see a virtual network ms appear\nselect this network and rename it remember the net ID for the next step Step 3 install zerotier on your instance Paste the following command into the instant manage connect session to download curl -s [https://install.zerotier.com](https://install.zerotier.com/) | sudo bash after downloading, connect to the private virtual network\nPaste the following command into the Session manage connect of instant sudo zerotier-cli join YOUR_NETWORD_ID Return to the website\nyou see an ip ms asking to join your network\nAccept it Step 4 install zerotier on your device on the page\nDownload - ZeroTier\ndownload and install the version suitable for your operating system\nFor example, after the installation is complete on your window Join the network as shown enter your network id and proceed to accept as in Step 3 above 2.3. SSH connection proceed similarly to the steps to connect with the public ip address in lesson 1\nyou just need to replace the public ip address with the private ip provided in step 3.\nafter waiting a few seconds\n"},{"uri":"https://thongnguyendt.github.io/AWS-Remote-VSC-to-EC2/3-hosting-vs-code-on-ec2-from-amazon-linux-2/","title":"Hosting VS Code on EC2 from Amazon Linux 2","tags":[],"description":"","content":"In this part, we will deploy a web application for VS Code on EC2 from an Amazon Linux 2 virtual machine (from now on called AL2), then connect to that website securely via port forwarding of AWS Session Manager System Manager. References:\nhttps://github.com/aws-samples/vscode-on-ec2-for-prototyping\nhttps://github.com/peteragility/ssm-port-forward\n3.0. Configure SSH on the AL2 virtual machine For convenience in typing commands, I configure SSH for the AL2 virtual machine to access from the real computer Terminal.\nStep 1: Open the file /etc/ssh/sshd_config sudo nano /etc/ssh/sshd_config\nStep 2: Make sure there is a line “PasswordAuthentication yes” Step 3: Reset sshd sudo systemctl restart sshd\n3.1. Install AWS CLI Reference: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html\nLinux: curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; unzip awscliv2.zip sudo ./aws/install Windows: Download and install AWS CLI from https://awscli.amazonaws.com/AWSCLIV2.msi\nCheck version aws --version 3.2. Install NodeJS see Tutorial: Setting Up Node.js on an Amazon EC2 Instance - AWS SDK for JavaScript Step 1: Install nvm Step 2: Install NodeJS LTS The installed NodeJS version is 20.16.0.\nStep 3: Determine the version by command node -v then the library is not found To fix this problem, I refer to the link node.js - GLIBC_2.27 not found while installing Node on Amazon EC2 instance - Stack Overflow, there are 2 solutions:\nDowngrade the version of NodeJS (currently 20.16.0) to 16.0.0. nvm install 16.0.0 Install the GLBIC_2.27 library version or higher The stack overflow link above will lead to the link glibc 2.27+ on Amazon Linux 2 | AWS re:Post (repost.aws). Accordingly, we know that upgrading the version is not possible, and downgrading NodeJS will be at risk of missing supporting libraries whenever the web app deployed behind is upgraded.\n3.3. Install session-manager plugin reference Install the Session Manager plugin on Amazon Linux 2 and Red Hat Enterprise Linux distributions - AWS Systems Manager) ### Step 1: Install session-manager-plugin jsx sudo yum install -y https://s3.amazonaws.com/session-manager-downloads/plug in/latest/linux_64bit/session-manager-plugin.rpm ### Step 2: Install project jsx npm ci Step 3: If you have never used CDK before, the Bootstrap process is only necessary for the first time. The following command is not necessary if you have already bootstrapped. npx cdk bootstrap Step 4: Deploy to AWS: npx cdk deploy If asked “Do you wish to deploy these changes?” Enter y Wait a few minutes for installation: ### (secondary): Proceed to observe ### stack VscodeOnEc2ForPrototyping Stack Tag Output: Tag Resources: ### CDKToolkit stack ### Tag Outputs ### Tag Resources Check instance ![Untitled](/images/part3/3- 3.3-step4-10-1.png) ### Step 5: Connecting but error Cannot connect web app because it only opens at localhost. But if you create a session to connect EC2 using Windows (refer to https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-sessions-start.html#sessions-remote-port-forwarding):\nTada:\n3.4. Demo network performance: https://www.youtube.com/watch?v=Pe1Whz-Q0TQ\n3.5. Cleanup: Wait a few minutes:\nGo to S3 Console to delete the created S3 bucket (name starts with cdk-hnb)\n"},{"uri":"https://thongnguyendt.github.io/AWS-Remote-VSC-to-EC2/4-manually-deploy-vs-code-on-ec2/","title":"Manually deploy VS Code on EC2","tags":[],"description":"","content":"(extended from section 3, no need to use CDK)\n4.1. Environment setup 4.1.1. VPC Requirements:\nPrivate subnet to set EC2 instance (minimum 1) 1 NAT Gateway for instance to access the internet Minimum 1 Public subnet to set Internet Gateway For convenience, I use the “VPC and more” feature in “Create VPC”:\nResource map:\nResult:\n4.1.2. Create Role and Policy for SSM Step 1: Create policy Create a JSON Policy, can be named VSCodeBastionHostInstanceRoleDefaultPolicy\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Action\u0026#34;: [ \u0026#34;*\u0026#34;, \u0026#34;ec2messages:*\u0026#34;, \u0026#34;ssm:UpdateInstanceInformation\u0026#34;, \u0026#34;ssmmessages:*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34; } ] } Result:\nStep 2: Create a role and add the newly created policy to the role Name the role as VscodeOnEc2ForPrototyping\nRole used for IAM instance profile\n4.1.3. Create security group for EC2 If your EC2 instance is not a public application, then according to best practice, there is no need for inbound rule, because we only access EC2 instance via Session Manager port forwarding.\nName the security group VSC-SG\n4.2 Deployment 4.2.1. Create EC2 instance Step 1: Select AMI as Amazon Linux 2023, instance type as t3.medium Step 2: Select the newly created VPC → any private subnet Step 3: Make sure there is no public IP Step 4: Select security group VSC-SG Step 5: Configure volume 100GB Step 6: Select IAM instance profile named “VscodeOnEc2ForPrototyping” created from before Step 7: In user-data section, paste the following code: ```jsx #!/bin/bash #!/bin/bash sudo rpm \u0026ndash;import https://packages.microsoft.com/keys/microsoft .asc sudo sh -c \u0026rsquo;echo -e \u0026ldquo;[code] name=Visual Studio Code baseurl=https://packages.microsoft.com/yumrepos/vscode enabled=1 gpgcheck=1 gpgkey=https://packages.microsoft. com/keys/microsoft.asc\u0026rdquo; \u0026gt; /etc/yum.repos.d/vscode.repo\u0026rsquo; # https://github.com/amazonlinux/amazon-linux-2023/issues/397 sleep 10 sudo yum install -y code git sudo tee /etc/systemd/system/code-server.service \u0026laquo;EOF [Unit] Description=Start code server [Service] ExecStart=/usr/bin/code serve-web \u0026ndash;port 8080 \u0026ndash;host 0.0.0.0 \u0026ndash;without-connection-token Restart=always Type=simple User=ec2-user [Install] WantedBy = multi- user.target EOF sudo systemctl daemon-reload sudo systemctl enable \u0026ndash;now code-server # Install Node.js sudo -u ec2-user -i \u0026laquo;EOF curl -o- https://raw.githubusercontent.com/nvm- sh/nvm/v0.39.7/install.sh | bash source .bashrc nvm install 20.11.0 nvm use 20.11.0 EOF\nPurpose: deploy VS-Code on web port 8080 of EC2 instance\r### Step 8: Finally, select “Create instance”.\rAfter a few minutes, make sure the instance has been successfully initialized\r![Untitled](/images/part4/4.2.1-step8.png)\r### Step 9: Connect to the instance by selecting Connect → Session Manager\rMake sure SSM agent has been installed by connecting to the instance via Session Manager\r![Untitled](/images/part4/4.2.1-step9.png)\rWhen the configuration is successful:\r![Untitled](/images/part4/4.2 .1-step9-1.png)\r### Step 10: Check the web app has been deployed successfully with the command\r```jsx\rcurl localhost:8080 Once the web has been deployed, we can get the resources of the page open on the port 8080: ### 4.2.2. Access VS Code deployed on EC2 from SSM via port forwarding\nReplace and in the script below with the private IP and instance ID of the EC2 instance, respectively\nConnect from Linux (note must have GUI on Linux machine): aws ssm start-session \\ --target \u0026lt;instance-ID\u0026gt; \\ --document-name AWS-StartPortForwardingSessionToRemoteHost \\ --parameters \u0026#39;{\u0026#34;host\u0026#34;:[\u0026#34;\u0026lt;Private- IP\u0026gt;\u0026#34;],\u0026#34;portNumber\u0026#34;:[\u0026#34;8080\u0026#34;], \u0026#34;localPortNumber\u0026#34;:[\u0026#34;8080\u0026#34;]}\u0026#39; Connect from Windows: aws ssm start-session ^ --target \u0026lt;instance-ID\u0026gt; ^ --document-name AWS-StartPortForwardingSessionToRemoteHost ^ --parameters host=\u0026#34;\u0026lt;Private-IP\u0026gt;\u0026#34;,portNumber=\u0026#34;8080\u0026#34;,localPortNumber=\u0026#34;8080\u0026#34; ``` ![Untitled](/images/ part4/4.2.2-2.png) At this time, access [localhost:8080](http://localhost:8080) on the browser: ![Untitled](/images/part4/4.2.3-3.png) ## 4.2. Check the performance: Youtube link: https://youtu.be/6DxtEsX6gvY "},{"uri":"https://thongnguyendt.github.io/AWS-Remote-VSC-to-EC2/5-extended-create-an-ami-from-an-instance-and-run-an-instance-from-that-ami/","title":"Appendix","tags":[],"description":"","content":"5.1. Create AMI Reference: https://000004.awsstudygroup.com/5-amazonec2basic/5.3-createcustomami/\nStep 1: Select Instance. Action box, Select Image and template → Create Image Step 2: Name and select Create Image Wait a few minutes until the status is OK:\n5.2. Create instance from AMI Step 1: In the left AMIs tag, select the AMI just created, select “Launch instance from AMI Step 2: Name the instance created from AMI as VSCodeFromAMI Step 3: Keep the instance type the same (if you want it faster, leave the type t3.medium). In the key pair section, select Proceed without a key pair because we connect using SSM. Step 4: Select a VPC with a private subnet. In the subnet section, select private subnet. Step 5: Select the security group created in the previous section, VSC-SG, or create a new one: no inbound rule; outbound rule open for Internet on all protocols. Step 6: Assign the necessary IAM profile to SSM Step 7: Select Create instance After a few minutes, the instance will be initialized\nStep 8: Create a session to connect the newly created instance from ami via port forwarding: aws ssm start-session ^ --target instance-id ^ --document-name AWS-StartPortForwardingSessionToRemoteHost ^ --parameters host=\u0026#34;private-ip\u0026#34;,portNumber=\u0026#34;8080\u0026#34;,localPortNumber=\u0026#34;8080\u0026#34; ``` ![Untitled](/images/part5/5.2-step8.png) "},{"uri":"https://thongnguyendt.github.io/AWS-Remote-VSC-to-EC2/6-generate-vscode-from-ami-build-from-ec2-image-builder/","title":"6-Generate VSCode from AMI build from EC2 Image Builder","tags":[],"description":"","content":"C2 Image Builder automates the creation, management, and deployment of customized, secure, and up-to-date “golden” ami that is pre-installed and pre-configured with software and settings.\nIn this section, we will build an AMI similar to part 5, but using EC2 Image Builder to create an image pipeline from infrastructure configuration (OS, VPC, subnet, security group), IAM instance profile, to installing the ami, deploying to an instance and testing the state of that instance, and scanning for security vulnerabilities in the ami.\nReference: AWS for Microsoft Workloads Immersion Day (workshops.aws)\n6.1. Terminology 6.2.1. AMI The basic unit of deployment in Amazon EC2. An AMI is a preconfigured VM image that contains the operating system and pre-installed software for deploying EC2 instances.\n6.2.2. Image Pipeline Automated configuration for building secure operating system images on AWS. The Image Builder pipeline is associated with an image recipe that defines the build, validation, and test phases for the image build lifecycle. The image pipeline can be associated with an infrastructure configuration that defines where the image is built. You can define properties such as version*,** subnet, security groups*, logging, and other infrastructure-related configurations.\n6.2.3. Image Recipe An image recipe is a document that defines the source image and the components that will be applied to the source image to create the desired configuration for the output image. You can use an image recipe to replicate builds. Image Builder recipes can be shared, forked, and edited using the console, AWS CLI, or API.\n6.2.4. Source Image The selected image and operating system used in your image recipe document along with the components. The source image and component definitions combine to create the desired configuration for the output image.\n6.2.5. Build Components Orchestration documents define the sequence of steps to download, install, and configure software packages. They also define authentication and security steps. A component is defined using a YAML document format.\n6.2. Deployment ### 6.2.1. Create Component ### Step 1: Access Components console. Click Create component. ### Step 2: Select Type as Build.\nStep 3: Select values ​​from the following list OS: Linux Compatible OS Versions: Amazon Linux 2023 Component name: VSC- Component Component version: 1.0.0 Step 4: In the Definition document section, Content section, copy the following content: name: HelloWorldTestingDocument description: This is hello world testing document. schemaVersion: 1.0 phases: - name: build steps: - name: HostingVSCode action: ExecuteBash inputs: commands: - | #!/bin/bash sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc sudo sh -c \u0026#39;echo -e \u0026#34;[code] name=Visual Studio Code baseurl=https://packages.microsoft.com/yumrepos/vscode enabled=1 gpgcheck=1 gpgkey=https://packages.microsoft.com/keys/microsoft.asc\u0026#34; \u0026gt; /etc/yum.repos.d/vscode.repo\u0026#39; # https://github.com/amazonlinux/amazon-linux-2023/issues/397 sleep 10 sudo yum install -y code git sudo tee /etc/systemd/system/code-server.service \u0026lt;\u0026lt;EOF [Unit] Description=Start code server [Service] ExecStart=/usr/bin/code serve-web --port 8080 --host 0.0.0.0 --without-connection-token Restart=always Type=simple User=ec2-user [Install] WantedBy = multi-user.target EOF sudo systemctl daemon-reload sudo systemctl enable --now code-server # Install Node.js sudo -u ec2-user -i \u0026lt;\u0026lt;EOF curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash source .bashrc nvm install 20.11.0 nvm use 20.11.0 EOF - name: validate steps: - name: VSCodeValidate action: ExecuteBash inputs: commands: - | #!/bin/bash if ! command -v code \u0026amp;\u0026gt; /dev/null then echo \u0026#34;code could not be found\u0026#34; exit 1 fi - name: validate steps: - name: NodeJSValidate action: ExecuteBash inputs: commands: - | #!/bin/bash if ! command -v node \u0026amp;\u0026gt; /dev/null then echo \u0026#34;Node could not be found\u0026#34; exit 1 fi - name: test steps: - name: TestWhetherAppDeploy action: ExecuteBash inputs: commands: - | #!/bin/bash if ! sudo lsof -i -n -P | grep 8080 | grep -w code \u0026amp;\u0026gt; /dev/null then echo \u0026#34;App could not be found\u0026#34; exit 1 fi This document consists of 3 parts:\nBuild: Based on the user-data of the previous part. Install VS Code as a web app listening on port 8080.\nValidation: Check if NodeJS and VS Code have been successfully installed\nTest: Check if the web app exists and listens on port 8080\nStep 5: Select “Create Component”. Result:\nStep 6 (Sub): Create a new version by selecting Action → Create new version. Just change the content of the content section and edit the value of the Component version section and select Create component\n6.2.2. Create a role for EC2 Image Builder Step 1: Select AWS service, use case EC2 Step 2: Add policies as shown below Step 3: Name the Role EC2ImageBuilderInfraConfigRole and describe 6.2.3. Create pipeline Step 1: Go to pipeline console. Step 2: Name the pipeline VSC-Pipeline . Description optional. You can also choose the option Enable EC2 image scanning to ensure ami security.\nStep 3: In the Build schedule section, select Manual and then select Next. Step 4: In the Recipe section, select Create new recipe . Select AMI in Image type Step 5: General, name the ami and version Step 6: Base image, select Select managed images and Amazon Linux Step 7: At Image origin, select Quick start . At Image name, select Amazon Linux 2023 x86 . Select compatible version, currently select Use latest available OS version Step 8: In Working directory, type /home/ec2-user because it will download nvm into the home directory of the executing user, which is ec2-user. Step 9: In Filter owner in Components section, select Owned by me. Select the created component. In the image is version 1.0.1, because the step to create a new version was added in the previous section (the component content remains unchanged).\nIn Test components - Amazon Linux section, for demo purposes, select reboot-test-linux .\nStep 10: Leave the Storage section as default and then Next. Step 11: In the Define image creation process section, select Next. Step 12: In the Infrastructure configuration section, select Create a new infrastructure configuration. Name it VSC-InfraConfig. Select the IAM role you created. Step 13: Expand the VPC, subnet and security groups section. Select instance type as t3.medium, VPC as VSC (created in Part 4), select 1 of 2 private subnets, select security group with VSC (security without inbound rule of previous part) to be able to create and evaluate instance. Select Next. Recall about security group outbound rules:\nStep 14: Leave distribution settings as default and then Next. Step 15: After reviewing, select Create pipeline. 6.3. Create instance from AMI built from pipeline 6.3.1. Create AMI from pipeline Step 1: Select the newly created pipeline. In the Action box, select Run pipeline: A green notification appears.\nStep 2: Click View details to monitor the details: See Image status is Testing.\nStep 3: Select the log stream link to monitor the pipeline\u0026rsquo;s CloudWatch log stream Test phase, step TestWhetherAppDeploy:\nRebootTest phase:\nIf there is an error, exit code 1, if there is no error, exit code 0. Finally, the test instance has no error.\nStep 4: Go back to the running pipeline. When the ami build is finished, the image status changes to Available. Click on the created image version (the image below is 1.0.4/1): Step 5: Observe the image created from EC2 Image Builder. Click on the AMI link: Step 6: Observe the ami from the EC2 page The AMI has been successfully created, and has passed the tests during the pipeline process without any errors.\n6.3.2. Create an instance from the newly created AMI Step 1: Go to the AMI page of the EC2 console. Select the newly created ami. Click Launch instance from AMI Step 2: Select the instance type. To save, choose t2.micro . Step 3: No key pair required. Step 4: Select VPC and security group with VSC , private subnet, make sure there is no public IP Step 5: Provide IAM instance profile with VSC to install SSM agent Step 6: Select Create instance Step 7: Wait until instance status Available Step 8: Access VSCode web app using Session Manager via port forwarding jsx aws ssm start-session ^ --target i-06ae65824244ff79b ^ --document-name AWS-StartPortForwardingSessionToRemoteHost ^ --parameters host=\u0026quot;10.0.132.106\u0026quot;,portNumber=\u0026quot;8080\u0026quot;,localPortNumber=\u0026quot;8080\u0026quot; ![Untitled](/images/part6/6.3 .2.-step8.png) Access successful! "},{"uri":"https://thongnguyendt.github.io/AWS-Remote-VSC-to-EC2/7-connect-vscode-using-ec2_instances_connect-and-aws-systems-manager/","title":"Connect VScode using EC2_Instances_Connect and AWS Systems Manager","tags":[],"description":"","content":"In this section we will connect vscode remote ssh to EC2 in private subnet\nthrough two different methods:\nEC2_Instances_Connect AWS Systems Manager Step 1 Set up the necessary endpoints To connect ssh to ec2 in private connect, we need to connect through an intermediary device: it can be a bastion host, or endpoints\nUse EC2 Instance Connect Endpoint\nSimilar to the endpoint settings in the above article, we need to create endpoint as follows\nUse 3 ssm endpoint connect\nSimilar to the endpoint settings in the above article, we need to create endpoint as follows\nNotes in the setup section:\nWe need to point correctly to the VPC, subnet of EC2 that needs to be connected Need to open security group so that EC2 and endpoint can connect to each other Note:\nWe need to point correctly to the VPC, subnet of EC2 that needs to be connected\nNeed to open security group so that EC2 and endpoint can connect to each other\nNeed to create 3 endpoints including:\ncom.amazonaws.us-east-1.ssm\ncom.amazonaws.us-east-1.ssmmessages\ncom.amazonaws.us-east-1.ec2messages\nEC2 Instance Connect allows us to directly create VPC endpoint in the connection section of ec2.\nEC2 Instance Connect does not require additional plugins\nEC2 Instance Connect does not require access to connect ec2 vs management service because it is a direct connection so no management service is needed\nCan only connect to 1 EC2, Set up each machine separately\nEasier configuration.\nYou must set up these endpoints in the VPC Endpoint section\nMust set up the plugin for AWS CLI on the source device\nMust have SSM agent on EC2, note:\nSome default AMI already have agent configuration You can refer to more here SSM is essentially a management service, so you need to grant permission to allow EC2 to interact with this service. You can refer to permission granting steps, permission details\nAllows you to configure multiple devices at the same time, this is the content of the service AWS Systems Manager\nBoth of these methods do not require:\nSetting up the ssh port for connection Public EC2 you go to the internet Install VScode user data packages Step 2: Configure EC2 Create the EC2 Instance Connect connection directly in the connect tab of ec2\nStep 3: Try to connect EC2_Instances_Connect If you see the above 3 warnings and cannot connect to your ec2 in the EC2 Instance Connect tab, it means that your VPC and subnet settings are currently on the right track.\nSelect by image\nif you get a yellow connect button result your sg and endpoint settings are correct\nif not read the troubleshooting steps on the side\nSelect Connect AWS Systems Manager In the Session Manager tab, if you see the yellow connection button as shown in the image, it means you have successfully established your connection\nIf not, you can check the following settings:\nIs your security group set up correctly, it is recommended that if you are not sure, you should set sg default for both your endpoint and EC2\nCheck that your endpoints and subnets point to the same private subnet. Note that selecting the subnet for the endpoint in part one is setting the target for the endpoint to connect to, not the location of the endpoint.\nNo need to set an endpoint for the public subnet\nCheck if your AMI supports Agent ssm. If you reboot the instance, if not, you can delete it, and recreate it or proceed to connect EC2_Instances_Connect and install the agent\nSelect Connect\nStep 4: connect using CLI The next steps require that you have set up AWS CLI v2\nIf you don\u0026rsquo;t have it, you can refer to here\nEC2_Instances_Connect No other installation package required\nAWS Systems Manager requires a plugin to connect the session on cli, if not you can refer to here\naws ec2-instance-connect ssh --instance-id \u0026lt;instance_id\u0026gt; aws ssm start-session --target \u0026lt;instance_id\u0026gt; Step 5: Configure VSCode So we have successfully connected ec2 via cli, now we need to set them up to connect via vscode\nWe perform the same steps as connecting to EC2 on public subnet\nIn the edit host step, we will create tunnels for ssh instead of using public ip\nThe job is very simple, just configure your host file as follows\n"},{"uri":"https://thongnguyendt.github.io/AWS-Remote-VSC-to-EC2/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://thongnguyendt.github.io/AWS-Remote-VSC-to-EC2/","title":"REMOTE DEVELOPMENT WITH VS VSCODE AND EC2","tags":[],"description":"","content":"REMOTE DEVELOPMENT WITH VS VSCODE AND EC2 Connecting your software development environment to a cloud server increases the scalability and flexibility of your application, allowing developers to easily scale resources as needed.\nIn addition, using a cloud server improves collaboration, allowing team members to work remotely efficiently. And most of all, the Cloud provides automation tools and services that help optimize the application development and deployment process.\nThis article will introduce solutions to connect your Virtual Studio Code software development environment to an EC2 server.\nTABLE OF CONTENTS 1. Connect VSCode to AWS EC2 using SSH\n1.1. Introduction to SSH connection\n1.2. Purpose of using SSH\n1.3. Introducing Remote-SSH Extension on VSCode\n1.4. Instructions for initializing Ubuntu EC2\n1.5. Instructions for configuring Command Prompt connection with EC2\n1.6. Instructions for configuring VSCode connection to EC2\n2. Connect VSCode to AWS EC2 using Zerotier\n2 .1. SSM connection\n2.2. Zerotier setup\n2.3. SSH connection\n3. Deploy VS-Code on EC2 instance from Amazon Linux 2 using CDK\n4. Manually deploy VS-Code on EC2 instance from Amazon Linux 2\n5. Create AMI from VSCode deployment instance and create EC2 instance from AMI that\n6. Create AMI from EC2 Image Builder and create EC2 instance hosting VS Code web app from that AMI\n7. Connect VScode using EC2_Instances_Connect and AWS Systems Manager\n"},{"uri":"https://thongnguyendt.github.io/AWS-Remote-VSC-to-EC2/tags/","title":"Tags","tags":[],"description":"","content":""}]